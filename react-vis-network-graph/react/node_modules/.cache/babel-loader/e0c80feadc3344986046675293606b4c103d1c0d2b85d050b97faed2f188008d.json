{"ast":null,"code":"var _jsxFileName = \"C:\\\\ders2\\\\a\\u011F python\\\\sigma\\\\app\\\\application\\\\src\\\\GraphComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Sigma from 'sigm.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('data.csv');\n      const textData = await response.text();\n      const parsedData = textData.split('\\n').map(row => {\n        const values = row.split(',');\n        return {\n          id: values[0],\n          // Örneğin, ilk sütun ID olarak kullanılabilir\n          label: values[1],\n          // Örneğin, ikinci sütun etiket olarak kullanılabilir\n          group: values[2],\n          // Örneğin, üçüncü sütun grubu temsil edebilir\n          value: parseFloat(values[3]) // Örneğin, dördüncü sütun bir değer içerebilir\n        };\n      });\n      setData(parsedData);\n    };\n    fetchData();\n  }, []);\n  if (!data.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Veriler y\\xFCkleniyor...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 28\n  }, this);\n  const graph = new Sigma({\n    container: 'graph-container',\n    graphSettings: {\n      nodes: data.map(node => ({\n        id: node.id,\n        label: node.label,\n        group: node.group,\n        value: node.value\n      })),\n      edges: [] // Kenarlar daha sonra eklenecek\n    },\n    styleSettings: {\n      nodes: {\n        fill: node => {\n          switch (node.group) {\n            case 'A':\n              return '#f00';\n            // Grup A için kırmızı renk\n            case 'B':\n              return '#0f0';\n            // Grup B için yeşil renk\n            default:\n              return '#ccc';\n            // Diğer gruplar için gri renk\n          }\n        }\n      }\n    }\n  });\n\n  // Sütunlara göre ilişkileri kurun\n  data.forEach(node => {\n    const relatedNodes = data.filter(otherNode => {\n      // İlişkileri belirleyen kriterlerinizi burada ekleyin\n      // Örneğin, aynı gruba ait veya belirli bir değere göre ilişkili olabilirler\n      return otherNode.group === node.group || otherNode.value > 50;\n    });\n    relatedNodes.forEach(relatedNode => {\n      graph.addEdge({\n        id: `${node.id}-${relatedNode.id}`,\n        source: node.id,\n        target: relatedNode.id\n      });\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"graph-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useState","useEffect","Sigma","jsxDEV","_jsxDEV","GraphComponent","_s","data","setData","fetchData","response","fetch","textData","text","parsedData","split","map","row","values","id","label","group","value","parseFloat","length","children","fileName","_jsxFileName","lineNumber","columnNumber","graph","container","graphSettings","nodes","node","edges","styleSettings","fill","forEach","relatedNodes","filter","otherNode","relatedNode","addEdge","source","target","_c","$RefreshReg$"],"sources":["C:/ders2/ağ python/sigma/app/application/src/GraphComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Sigma from 'sigm.js';\r\n\r\nconst GraphComponent = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await fetch('data.csv');\r\n      const textData = await response.text();\r\n      const parsedData = textData.split('\\n').map((row) => {\r\n        const values = row.split(',');\r\n        return {\r\n          id: values[0], // Örneğin, ilk sütun ID olarak kullanılabilir\r\n          label: values[1], // Örneğin, ikinci sütun etiket olarak kullanılabilir\r\n          group: values[2], // Örneğin, üçüncü sütun grubu temsil edebilir\r\n          value: parseFloat(values[3]), // Örneğin, dördüncü sütun bir değer içerebilir\r\n        };\r\n      });\r\n      setData(parsedData);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (!data.length) return <div>Veriler yükleniyor...</div>;\r\n\r\n  const graph = new Sigma({\r\n    container: 'graph-container',\r\n    graphSettings: {\r\n      nodes: data.map((node) => ({\r\n        id: node.id,\r\n        label: node.label,\r\n        group: node.group,\r\n        value: node.value,\r\n      })),\r\n      edges: [], // Kenarlar daha sonra eklenecek\r\n    },\r\n    styleSettings: {\r\n      nodes: {\r\n        fill: (node) => {\r\n          switch (node.group) {\r\n            case 'A':\r\n              return '#f00'; // Grup A için kırmızı renk\r\n            case 'B':\r\n              return '#0f0'; // Grup B için yeşil renk\r\n            default:\r\n              return '#ccc'; // Diğer gruplar için gri renk\r\n          }\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  // Sütunlara göre ilişkileri kurun\r\n  data.forEach((node) => {\r\n    const relatedNodes = data.filter((otherNode) => {\r\n      // İlişkileri belirleyen kriterlerinizi burada ekleyin\r\n      // Örneğin, aynı gruba ait veya belirli bir değere göre ilişkili olabilirler\r\n      return otherNode.group === node.group || otherNode.value > 50;\r\n    });\r\n    relatedNodes.forEach((relatedNode) => {\r\n      graph.addEdge({\r\n        id: `${node.id}-${relatedNode.id}`,\r\n        source: node.id,\r\n        target: relatedNode.id,\r\n      });\r\n    });\r\n  });\r\n\r\n  return <div id=\"graph-container\"></div>;\r\n};\r\n\r\nexport default GraphComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}