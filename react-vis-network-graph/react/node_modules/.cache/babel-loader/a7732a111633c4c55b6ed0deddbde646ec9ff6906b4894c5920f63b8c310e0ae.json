{"ast":null,"code":"var _jsxFileName = \"C:\\\\ders2\\\\a\\u011F python\\\\sigma\\\\app\\\\application\\\\src\\\\SigmaGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport Sigma from \"react-sigma\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SigmaGraph = () => {\n  _s();\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    edges: []\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\"data.csv\");\n      const reader = response.body.getReader();\n      const result = await reader.read();\n      const decoder = new TextDecoder(\"utf-8\");\n      const csv = decoder.decode(result.value);\n      const {\n        data\n      } = Papa.parse(csv, {\n        header: true\n      });\n\n      // CSV'den alınan verileri uygun formatta Sigma.js için hazırla\n      const nodes = [];\n      const edges = [];\n      data.forEach((row, index) => {\n        nodes.push({\n          id: row.nodeId,\n          label: row.nodeLabel\n        });\n        if (index > 0) {\n          edges.push({\n            id: `e${index}`,\n            source: row.sourceNode,\n            target: row.targetNode\n          });\n        }\n      });\n      setGraphData({\n        nodes,\n        edges\n      });\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Graph From CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sigma, {\n      graph: graphData,\n      children: [/*#__PURE__*/_jsxDEV(Sigma.LoadJSON, {\n        graph: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sigma.RendererContainer, {\n        style: {\n          maxWidth: \"600px\",\n          height: \"400px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Sigma.Renderer, {\n          type: \"canvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(SigmaGraph, \"KVlTlZs/du+jMJ9hcfGvLx5PZFw=\");\n_c = SigmaGraph;\nexport default SigmaGraph;\nvar _c;\n$RefreshReg$(_c, \"SigmaGraph\");","map":{"version":3,"names":["React","useState","useEffect","Papa","Sigma","jsxDEV","_jsxDEV","SigmaGraph","_s","graphData","setGraphData","nodes","edges","fetchData","response","fetch","reader","body","getReader","result","read","decoder","TextDecoder","csv","decode","value","data","parse","header","forEach","row","index","push","id","nodeId","label","nodeLabel","source","sourceNode","target","targetNode","children","fileName","_jsxFileName","lineNumber","columnNumber","graph","LoadJSON","RendererContainer","style","maxWidth","height","Renderer","type","_c","$RefreshReg$"],"sources":["C:/ders2/ağ python/sigma/app/application/src/SigmaGraph.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport Sigma from \"react-sigma\";\r\n\r\nconst SigmaGraph = () => {\r\n  const [graphData, setGraphData] = useState({ nodes: [], edges: [] });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(\"data.csv\");\r\n      const reader = response.body.getReader();\r\n      const result = await reader.read();\r\n      const decoder = new TextDecoder(\"utf-8\");\r\n      const csv = decoder.decode(result.value);\r\n      const { data } = Papa.parse(csv, { header: true });\r\n\r\n      // CSV'den alınan verileri uygun formatta Sigma.js için hazırla\r\n      const nodes = [];\r\n      const edges = [];\r\n      data.forEach((row, index) => {\r\n        nodes.push({ id: row.nodeId, label: row.nodeLabel });\r\n        if (index > 0) {\r\n          edges.push({\r\n            id: `e${index}`,\r\n            source: row.sourceNode,\r\n            target: row.targetNode,\r\n          });\r\n        }\r\n      });\r\n\r\n      setGraphData({ nodes, edges });\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Graph From CSV</h1>\r\n      <Sigma graph={graphData}>\r\n        <Sigma.LoadJSON graph={graphData} />\r\n        <Sigma.RendererContainer style={{ maxWidth: \"600px\", height: \"400px\" }}>\r\n          <Sigma.Renderer type=\"canvas\" />\r\n        </Sigma.RendererContainer>\r\n      </Sigma>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SigmaGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}