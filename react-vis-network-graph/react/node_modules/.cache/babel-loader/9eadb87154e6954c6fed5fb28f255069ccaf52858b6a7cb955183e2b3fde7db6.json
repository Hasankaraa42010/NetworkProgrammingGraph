{"ast":null,"code":"var _jsxFileName = \"C:\\\\ders2\\\\a\\u011F python\\\\sigma\\\\app\\\\application\\\\src\\\\SigmaGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Sigma, RandomizeNodePositions, RelativeSize, EdgeShapes, ForceAtlas2 } from 'react-sigma';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SigmaGraph = () => {\n  _s();\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    edges: []\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // CSV dosyasını oku\n        const response = await fetch('../data.csv');\n        const reader = response.body.getReader();\n        const result = await reader.read();\n        const decoder = new TextDecoder('utf-8');\n        const csv = decoder.decode(result.value);\n\n        // CSV'den verileri ayrıştır\n        const parsedData = Papa.parse(csv, {\n          header: true\n        });\n        const nodes = parsedData.data.map(row => ({\n          id: row.id,\n          label: row.label\n        }));\n        const edges = parsedData.data.map(row => ({\n          id: row.id,\n          source: row.source,\n          target: row.target\n        }));\n\n        // State'i güncelle\n        setGraphData({\n          nodes,\n          edges\n        });\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []); // Sadece ilk render'da çalışacak\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sigma.js ile Grafik Olu\\u015Fturma\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sigma, {\n      graph: graphData,\n      children: [/*#__PURE__*/_jsxDEV(RandomizeNodePositions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RelativeSize, {\n        initialSize: 15\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EdgeShapes, {\n        default: \"straight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForceAtlas2, {\n        worker: true,\n        barnesHutOptimize: true,\n        barnesHutTheta: 0.6,\n        iterationsPerRender: 1,\n        timeout: 3000\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(SigmaGraph, \"KVlTlZs/du+jMJ9hcfGvLx5PZFw=\");\n_c = SigmaGraph;\nexport default SigmaGraph;\nvar _c;\n$RefreshReg$(_c, \"SigmaGraph\");","map":{"version":3,"names":["React","useState","useEffect","Sigma","RandomizeNodePositions","RelativeSize","EdgeShapes","ForceAtlas2","Papa","jsxDEV","_jsxDEV","SigmaGraph","_s","graphData","setGraphData","nodes","edges","fetchData","response","fetch","reader","body","getReader","result","read","decoder","TextDecoder","csv","decode","value","parsedData","parse","header","data","map","row","id","label","source","target","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","graph","initialSize","default","worker","barnesHutOptimize","barnesHutTheta","iterationsPerRender","timeout","_c","$RefreshReg$"],"sources":["C:/ders2/ağ python/sigma/app/application/src/SigmaGraph.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Sigma, RandomizeNodePositions, RelativeSize, EdgeShapes, ForceAtlas2 } from 'react-sigma';\r\nimport Papa from 'papaparse';\r\n\r\nconst SigmaGraph = () => {\r\n  const [graphData, setGraphData] = useState({ nodes: [], edges: [] });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // CSV dosyasını oku\r\n        const response = await fetch('../data.csv');\r\n        const reader = response.body.getReader();\r\n        const result = await reader.read();\r\n        const decoder = new TextDecoder('utf-8');\r\n        const csv = decoder.decode(result.value);\r\n        \r\n        // CSV'den verileri ayrıştır\r\n        const parsedData = Papa.parse(csv, { header: true });\r\n        const nodes = parsedData.data.map(row => ({ id: row.id, label: row.label }));\r\n        const edges = parsedData.data.map(row => ({ id: row.id, source: row.source, target: row.target }));\r\n        \r\n        // State'i güncelle\r\n        setGraphData({ nodes, edges });\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // Sadece ilk render'da çalışacak\r\n\r\n  return (\r\n    <div>\r\n      <h1>Sigma.js ile Grafik Oluşturma</h1>\r\n      <Sigma graph={graphData}>\r\n        <RandomizeNodePositions />\r\n        <RelativeSize initialSize={15} />\r\n        <EdgeShapes default=\"straight\" />\r\n        <ForceAtlas2 worker barnesHutOptimize barnesHutTheta={0.6} iterationsPerRender={1} timeout={3000} />\r\n      </Sigma>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SigmaGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}